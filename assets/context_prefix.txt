please see below my project code and file locations, we will be working on this code together; familiarise yourself with the project and give me a brief overview of the most prolific code smell based on the principles below. To help me understand how prolific this code smell is, I'd like you to rate it on the "smell 'o' meter" out of 100. So if it's pretty bad code smell, very stinky, then rate it 100 on the smell'o'meter. If it's minor, a little pong give it a 10 on the smell'o'meter. Once I have received this, I'll give you specific instructions on what we'll be working on:

--- Core Development Principles for Our Collaboration ---

Simplicity & Clarity: Prioritize simple, logical, and easy-to-understand code. Break down complexity.

DRY (Don't Repeat Yourself): Extract and reuse common logic patterns.

Single Responsibility: Ensure functions/modules have one clear, focused purpose.

Robust Error Handling: Implement comprehensive try/catch blocks and detailed logging (including stack traces where helpful) as we rely on this instead of automated tests. Provide user-friendly error messages.

Mandatory Logging: Log crucial operations, decisions, fetched data states, and errors for debugging.

No Tests: We will not add any test files or testing frameworks.

File Context Awareness: Users may exclude files; ask for clarification if essential context seems missing from provided code snippets.

Naming Consistency: Refactored file names should remain the same unless the fundamental purpose changes (avoid suffixes like _new or _improved).

Incremental Refactoring: When refactoring multiple files, we'll proceed one file at a time.

Refactoring Scope & Output: Provide the complete, fully refactored file when changes affect multiple areas (methods, imports, module scope). However, if refactoring is confined solely to one specific method, you may provide only the updated method block for brevity. Always ensure the final provided code (whether full file or single method) is complete and functional in its intended scope, avoiding partial refactors.

Try to keep file sizes to no more than 400 lines, when this limit is exceeded, consider logical breakout adhering to the principles above.